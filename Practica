#include "pch.h"
#include <string>
#include <iostream>
#include <fstream>
using namespace std;

int GetCount(string s) //функция, возвращающая количество вещей в багаже из строки s
{
	int n1, n2, Count; //позиция первого разделителя, позиция второго разделителя, количество вещей
	string sStr; //подстрока для выделения количества
	n1 = s.find_first_of(":;|/"); //находим позицию символа-разделителя :;|/ с начала строки
	n2 = s.find_last_of(":;|/"); //находим позицию символа-разделителя :;|/ с конца строки
	sStr = s.substr(n1 + 1, n2 - n1); //выделяем подстроку между найденными разделителями
	Count = strtol(sStr.c_str(), NULL, 10); //преобразуем подстроку в число
	return(Count); //возвращаем найденное число
}

double GetWight(string s) //функция, возвращающая массу багажа из строки s
{
	int n1, n2; //позиция второго разделителя, позиция конца строки
	double Wight; //масса багажа
	string sStr; //подстрока для выделения массы
	n1 = s.find_last_of(":;|/"); //находим позицию символа-разделителя :;|/ с конца строки
	n2 = strlen(s.c_str()); //находим позицию конца строки
	sStr = s.substr(n1 + 1, n2 - n1); //выделяем подстроку между найденными позициями
	n1 = sStr.find("."); //в найденной подстроке находим позицию "точки"
	if (n1>0) sStr.replace(n1, 1, ","); //если нашли, то меняем на "запятую", т.к. в русской локали десятичный разделитель - "запятая"
	Wight = strtod(sStr.c_str(), NULL); //преобразуем подстроку в число
	return(Wight); //возвращаем найденную массу
}

int main()
{
	setlocale(LC_ALL, "rus"); //устанавливаем русскую локаль для корректного отображения Кириллицы
	ifstream file; //файловая переменная для открытия файла на чтение
	ofstream cfile; //файловая переменная для открытия файла на запись пассажиров с заданным числом вещей
	ofstream mfile; //файловая переменная для открытия файла на запись пассажиров с превышением массы багажа
	string Str; //рабочая строка для чтения строк из файла
	int Count; //количество вещей в багаже, введенное пользователем
	int cCount = 0; //число найденных пассажиров с заданным количеством вещей, изначально - 0
	double Wight; //масса багажа, введенная пользователем
	int cWight = 0; //число найденных пассажиров, у которых масса багажа больше, изначально - 0
	file.open("Bagaj.txt"); //открываем файл в режиме чтения, файл должен находиться в одной папке с программой
	if (file) //если открытие файла прошло корректно, то
	{
		cout << "Введите количество вещей для отбора пассажиров: ";
		cin >> Count;
		cout << "Введите предельный вес багажа: ";
		cin >> Wight;
		cfile.open("Bagaj_c.txt", ios::out); //открываем файл на запись с очисткой, если уже что-то есть
		mfile.open("Bagaj_m.txt", ios::out); //открываем файл на запись с очисткой, если уже что-то есть
		//цикл для чтения значений из файла; выполнение цикла прервется,
		//когда достигнем конца файла, в этом случае file.eof() вернет истину.
		while (!file.eof())
		{
			getline(file, Str); //чтение очередной строки из потока file в переменную Str
			if (Count == GetCount(Str)) //если число вещей совпадает, увеличиваем счетчик
			{
				cCount++;
				cfile << Str << endl; //записываем строку в файл
			}
			if (Wight < GetWight(Str)) //если масса превышает, увеличиваем счетчик
			{
				cWight++;
				mfile << Str << endl; //записываем строку в файл
			}
		}
		file.close(); //закрытие потока
		cfile.close(); //закрытие потока
		mfile.close(); //закрытие потока
		//вывод на экран количества подсчитанных чисел
		cout << "Количество пассажиров, в багаже который " << Count << " вещей: " << cCount << endl;
		cout << "Количество пассажиров, масса багажа которых превышает " << Wight << " кг: " << cWight << endl;
	}
	else cout << " Файл не существует" << endl; //если открытие файла прошло некорректно, то вывод сообщения об отсутствии такого файла
	system("pause");
	return 0;
}
